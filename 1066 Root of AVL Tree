//平衡二叉树的基本操作，第一次见到，学就完事了
#include<iostream>
using namespace std;
struct node{
	struct node *left,*right;
	int val;
};
node *rotateleft(node *root){
	node *t=root->right;
	root->right=t->left;
	t->left=root;
	return t;
}
node *rotateright(node *root){
	node *t=root->left;
	root->left=t->right;
	t->right=root;
	return t;
}
node *rotateleftright(node *root){
	root->left=rotateleft(root->left);
	return rotateright(root);
}
node *rotaterightleft(node *root){
	root->right=rotateright(root->right);
	return rotateleft(root);
}
int getheight(node *root){
	if(root==NULL){
		return 0;
	}
	return max(getheight(root->left),getheight(root->right))+1;
}
node *insert(node *root,int val){
	if(root==NULL){
		root=new node();
		root->val=val;
		root->left=NULL;
		root->right=NULL;
	}
	else if(val<root->val){
		root->left=insert(root->left,val);
		if(getheight(root->left)-getheight(root->right)==2){
			root=val<root->left->val? rotateright(root):rotateleftright(root);
		}
	}
	else{
		root->right=insert(root->right,val);
		if(getheight(root->right)-getheight(root->left)==2){
			root=val>root->right->val? rotateleft(root):rotaterightleft(root);
		}
	}
	return root;
}
int main(){
	int n,val;
	scanf("%d",&n);
	node *root=NULL;
	for(int i=0;i<n;i++){
		scanf("%d",&val);
		root=insert(root,val);
	}
	printf("%d",root->val);
	return 0;
}
