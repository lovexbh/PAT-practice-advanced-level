//给一个二叉树，要求把它倒转，然后输出层序和中序
//写的磕磕盼盼，不过总算是独立ac了
#include<iostream>
#include<vector>
#include<queue>
using namespace std;
int n;
int son[10][2];
int father[10];
queue<int> temp;
vector<int> in,level;
int start;
bool v[10];
void bfs(int cur){
	temp.push(cur);
	while(!temp.empty()){
		int k=temp.front();
		temp.pop();
		level.push_back(k);
		for(int i=1;i>=0;i--){
			if(son[k][i]!=-1){
				temp.push(son[k][i]);
			}
		}
	}
	return;
}
void inorder(int cur){
	if(cur==-1){
		return;
	}
	v[cur]=true;
	if(!v[son[cur][0]]){
		inorder(son[cur][0]);
	}
	in.push_back(cur);
	if(!v[son[cur][1]]){
		inorder(son[cur][1]);
	}
	if(!v[father[cur]]){
		inorder(father[cur]);
	}
	return;
}
int main(){
	scanf("%d",&n);
	getchar();
	for(int i=0;i<10;i++){
		son[i][0]=-1;
		son[i][1]=-1;
		father[i]=-1;
	}
	for(int i=0;i<n;i++){
		int num;
		char c1,c2;
		scanf("%c %c",&c1,&c2);
		getchar();
		if(c1!='-'){
			num=c1-'0';
			son[i][0]=num;
			father[num]=i;
		}
		else{
			son[i][0]=-1;
		}
		if(c2!='-'){
			num=c2-'0';
			son[i][1]=num;
			father[num]=i;
		}
		else{
			son[i][1]=-1;
		}
	}
	int root;
	for(int i=0;i<n;i++){
		if(father[i]<0){
			root=i;
		}
	}
	start=root;
	while(son[start][0]!=-1){
		start=son[start][0];
	}
	bfs(root);
	inorder(start);
	for(int i=0;i<n;i++){
		if(i!=0){
			printf(" ");
		}
		printf("%d",level[i]);
	}
	printf("\n");
	for(int i=0;i<n;i++){
		if(i!=0){
			printf(" ");
		}
		printf("%d",in[n-i-1]);
	}
	printf("\n");
	return 0;
} 
